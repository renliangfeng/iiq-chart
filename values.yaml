# Default values for iiq-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  pullPolicy: IfNotPresent
  # registry: localhost:5000
  repository: localhost:5000/my-iiq-image
  tag: v1

# imagePullSecrets: []
nameOverride: ""
fullnameOverride: "iiq-app"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "iiq-deploy"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: LoadBalancer
  port: 80

containers:
  containerPort: 8080
  
  envVars:
    - name: TZ
      value: Australia/Canberra
      
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
      
  livenessProbe:
    httpGet:
      path: /
      port: http
    failureThreshold: 6
    initialDelaySeconds: 120
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
    
  readinessProbe:
    httpGet:
      path: /
      port: http
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3

volumeMounts:
  - name: iiq-prop-volume
    mountPath: /usr/local/tomcat/webapps/identityiq/WEB-INF/classes/iiq.properties
    subPath: iiq.properties
  - name: log4j-prop-volume
    mountPath: /usr/local/tomcat/webapps/identityiq/WEB-INF/classes/log4j2.properties
    subPath: log4j2.properties
  - name: keystore-volume
    mountPath: /usr/local/keystore
  - name: iiq-log-volume
    mountPath: /usr/local/tomcat/logs
volumes:
  - name: iiq-prop-volume
    configMap:
      name: iiq-config
  - name: log4j-prop-volume
    configMap:
      name: iiq-config
  - name: keystore-volume
    hostPath:
      #To mount volumes using Kubernetes on Docker Desktop for Windows the path will be: /run/desktop/mnt/host/c/PATH_TO_FILE,
      #Here, the mount folder in hosting Windows is:
      #   C:/sailpoint/keystore
      #In macOS or Linux, just use normal path
      #path: /run/desktop/mnt/host/c/sailpoint/keystore
      path: /Users/bruce.ren/Desktop/share-config/sailpoint/keystore
      type: Directory
  - name: iiq-log-volume
    hostPath:
      #To mount volumes using Kubernetes on Docker Desktop for Windows the path will be: /run/desktop/mnt/host/c/PATH_TO_FILE,
      #Here, the mount folder in hosting Windows is:
      #   C:/sailpoint/logs
      #In macOS or Linux, just use normal path  
      #path: /run/desktop/mnt/host/c/sailpoint/logs
      path: /Users/bruce.ren/Desktop/share-config/sailpoint/logs
      type: Directory

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
